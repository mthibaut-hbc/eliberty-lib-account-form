{"version":3,"sources":["../../../src/Components/PasswordAndProgressBar/PasswordAndProgressBar.jsx"],"names":["PasswordAndProgressBar","props","state","password","passwordConfirm","checkOk","onChangeFirstPassword","bind","e","setState","target","value","setPassword","error","formatMessage","intl","id","defaultMessage","onChangeSecondPassword","displayError","Component","proptypes","PropTypes","func","isRequired"],"mappings":"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","file":"PasswordAndProgressBar.js","sourcesContent":["import React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { checkStrengthPassword, checkPasswordConfirm } from '../../Helpers/PasswordCheckHelper';\nimport {PropTypes} from \"prop-types\";\n\n/**\n * Class : Progress bar\n */\nclass PasswordAndProgressBar extends Component {\n\n  // Define Constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: '',\n      passwordConfirm: '',\n      checkOk: true,\n    };\n    this.onChangeFirstPassword = this.onChangeFirstPassword.bind(this);\n    this.onChangeFirstPassword = this.onChangeFirstPassword.bind(this);\n  }\n\n  /**\n   * Validation First Password Progress Bar\n   * @param e\n   */\n  onChangeFirstPassword(e) {\n    this.setState({password: e.target.value});\n    checkStrengthPassword(e.target.value);\n    this.props.setPassword(e.target.value);\n\n  }\n\n  /**\n   * Validation Second Password equality first password\n   * @param e\n   */\n  onChangeSecondPassword(e) {\n    this.setState({passwordConfirm: e.target.value});\n    const checkOk = checkPasswordConfirm(this.state.password, e.target.value);\n    this.setState({checkOk: checkOk});\n  }\n\n  /**\n   * Display text of error for second password\n   */\n  displayError() {\n    const error = 'les mots de passés doivent être idéntiques';\n    return this.state.checkOk ? null : <p className=\"errorInputText\">{error}</p>\n  }\n\n  render() {\n    const {formatMessage} = this.props.intl;\n    return (\n      <div>\n        <div className=\"row form_content_wrapper password_first\">\n          <div className=\"col-xs-12\">\n            <div className=\"row\">\n              <div className=\"form-group\">\n                <div className=\"col-xs-12 passwordfirst new-password\">\n                  <div className=\"content-psw\">\n                    <input type=\"password\"\n                           id=\"user_password_first\"\n                           className=\"show-pwd-active\"\n                           required=\"required\"\n                           autoComplete=\"off\"\n                           data-control=\"true\"\n                           value={this.state.password}\n                           onChange={(e) => this.onChangeFirstPassword(e)}\n                           placeholder={formatMessage({\n                             id: 'rp.checkout.customer.password.label',\n                             defaultMessage: 'Password'\n                           })}/>\n                    <label htmlFor=\"user_password_first\" className=\"control-label\">\n                      <FormattedMessage id=\"rp.checkout.customer.password.label\" defaultMessage=\"Password\"/>\n                    </label>\n                    <div className=\"group-eye\">\n                      <button id=\"btn-eye\" type=\"button\" onClick={() => false} className=\"btn-eye pwd-eye\"/>\n                    </div>\n                  </div>\n                  <div className=\"content-required-pwd\" tabIndex='-1'>\n                    <span className=\"progress-bar\"/>\n                    <FormattedMessage id=\"rp.forms.identification.password.required.list\"\n                                      defaultMessage=\"Password required list\"/>\n                    <ul className=\"list-valid-pwd\">\n                      <li className=\"pwd-item1\">\n                        <FormattedMessage id=\"rp.forms.identification.password.required.character.min\"\n                                          defaultMessage=\"8 characters min\"/>\n                      </li>\n                      <li className=\"pwd-item2\">\n                        <FormattedMessage id=\"rp.forms.identification.password.required.capital.letter\"\n                                          defaultMessage=\"A capital letter\"/>\n                      </li>\n                      <li className=\"pwd-item3\">\n                        <FormattedMessage id=\"rp.forms.identification.password.required.number\"\n                                          defaultMessage=\"A number\"/>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row form_content_wrapper\">\n          <div className=\"col-xs-12\">\n            <div className=\"row\">\n              <div className=\"form-group\">\n                <div className=\"col-xs-12\">\n                  <input type=\"password\"\n                         id=\"user_password_second\"\n                         required=\"required\"\n                         autoComplete=\"off\"\n                         data-control=\"true\"\n                         className={this.state.checkOk ? '' : 'inputError show-pwd-active'}\n                         value={this.state.passwordConfirm}\n                         onChange={(e) => this.onChangeSecondPassword(e)}\n                         placeholder={formatMessage({\n                           id: 'rp.checkout.customer.password.validate',\n                           defaultMessage: 'password validate'\n                         })}/>\n                  <label htmlFor=\"user_password_second\" className=\"control-label\">\n                    <FormattedMessage id=\"rp.checkout.customer.password.validate\" defaultMessage=\"A number\"/>\n                  </label>\n                  {this.displayError()}\n                  <div className=\"group-eye\">\n                    <button id=\"btn-eye-confirm\" type=\"button\" onClick={() => false} className=\"btn-eye pwd-eye\"/>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPasswordAndProgressBar.proptypes = {\n  setPassword: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(PasswordAndProgressBar);"]}