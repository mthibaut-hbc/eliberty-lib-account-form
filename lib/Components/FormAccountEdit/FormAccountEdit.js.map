{"version":3,"sources":["../../../src/Components/FormAccountEdit/FormAccountEdit.jsx"],"names":["FormAccountEdit","props","onchangeOptin","bind","onchangeMobile","onchangePhone","setLabelElementForInput","idLabel","idTrad","newlabel","document","createElement","setAttribute","innerHTML","intl","formatMessage","id","defaultMessage","elemLabel","getElementById","after","e","value","localInfo","get","setOptIn","status","countryData","number","setMobile","setPhone","key","size","format","getValueForInput","getBirthdateValue","Component","propTypes","PropTypes","object","isRequired","defaultProps"],"mappings":"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","file":"FormAccountEdit.js","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes} from \"prop-types\";\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport moment from 'moment/src/moment';\nimport IntlTelInput from \"react-intl-tel-input\";\nimport AddressForm from \"../AddressForm/AddressForm\";\nimport {isValidField} from '../../Helpers/ValidatorFieldsHelper';\n\n/**\n * Class : Account Form\n */\nclass FormAccountEdit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onchangeOptin = this.onchangeOptin.bind(this);\n    this.onchangeMobile = this.onchangeMobile.bind(this);\n    this.onchangePhone = this.onchangePhone.bind(this);\n  }\n\n  /**\n   * Executed after the first render only on the client side\n   */\n  componentDidMount() {\n    // We add element label for input mobile and phone\n    this.setLabelElementForInput('account_user_mobile', 'rp.checkout.customer.mobile');\n    this.setLabelElementForInput('account_user_phone', 'rp.checkout.customer.phone');\n  }\n\n  /**\n   *\n   * @param idLabel\n   * @param idTrad\n   */\n  setLabelElementForInput(idLabel, idTrad) {\n    let newlabel = document.createElement(\"Label\");\n    newlabel.setAttribute('class', 'control-label paddingLeftPhone');\n    newlabel.setAttribute('for', idLabel);\n    newlabel.innerHTML = this.props.intl.formatMessage({id: idTrad, defaultMessage: 'phone number'});\n\n    let elemLabel = document.getElementById(idLabel);\n    elemLabel.setAttribute('data-control', 'true');\n    elemLabel.after(newlabel);\n\n    document.getElementById(idLabel).setAttribute('required', 'required');\n  }\n\n  /**\n   *\n   * @param e\n   */\n  onchangeOptin(e) {\n    const value = this.props.localInfo.get('values').get('optIn');\n    this.props.setOptIn(value);\n  }\n\n  /**\n   *\n   * @param status\n   * @param value\n   * @param countryData\n   * @param number\n   * @param id\n   */\n  onchangeMobile(status, value, countryData, number, id) {\n    this.props.setMobile(value);\n  }\n\n  /**\n   *\n   * @param status\n   * @param value\n   * @param countryData\n   * @param number\n   * @param id\n   */\n  onchangePhone(status, value, countryData, number, id) {\n    this.props.setPhone(value);\n  }\n\n  /**\n   *\n   * @param key\n   * @returns {string}\n   */\n  getValueForInput(key) {\n    return this.props.localInfo.size > 0\n      ? this.props.localInfo.get(key)\n      : '';\n  }\n\n  /**\n   *\n   * @param localInfo\n   * @returns {string}\n   */\n  getBirthdateValue(key) {\n    return this.props.localInfo.size > 0\n      ? moment(this.props.localInfo.get(key), 'YYYY-MM-DD HH:mm:ssZZ').format('DD/MM/YYYY')\n      : '';\n  }\n\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <div id=\"accountForm\" className=\"checkout_part_content accountForm\">\n        <div className=\"panel-body\">\n          <form>\n            <div className=\"row form_content_wrapper\">\n              <div className=\"col-xs-12\">\n                <div className=\"form-group\">\n                  <div className=\"col-xs-12\">\n                    <input type=\"text\"\n                           id=\"account_user_lastname\"\n                           disabled=\"disabled\"\n                           required=\"required\"\n                           placeholder={formatMessage({\n                             id: 'rp.checkout.customer.lastname',\n                             defaultMessage: 'lastname'\n                           })}\n                           data-control=\"true\"\n                           value={this.getValueForInput('lastname') || \"\"}\n                    />\n                    <label htmlFor=\"account_user_lastname\" className=\"control-label\">\n                      <FormattedMessage id=\"rp.checkout.customer.lastname\" defaultMessage=\"lastname\"/>\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row form_content_wrapper\">\n                <div className=\"form-group\">\n                  <div className=\"col-xs-12\">\n                    <input type=\"text\"\n                           id=\"account_user_firstname\"\n                           disabled=\"disabled\"\n                           required=\"required\"\n                           placeholder={formatMessage({\n                             id: 'rp.checkout.customer.firstname',\n                             defaultMessage: 'firstname'\n                           })}\n                           data-control=\"true\"\n                           value={this.getValueForInput('firstname') || \"\"}\n                    />\n                    <label htmlFor=\"account_user_firstname\" className=\"control-label\">\n                      <FormattedMessage id=\"rp.checkout.customer.firstname\" defaultMessage=\"firstname\"/>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row form_content_wrapper \">\n              <div className=\"col-sm-12\">\n                <div className=\"form-group\">\n                  <input type=\"text\"\n                         id=\"account_user_birthdate\"\n                         disabled=\"disabled\"\n                         required=\"required\"\n                         className=\"rp_date\"\n                         placeholder={formatMessage({\n                           id: 'rp.checkout.customer.birthdate',\n                           defaultMessage: 'birthdate'\n                         })}\n                         data-control=\"true\"\n                         value={this.getBirthdateValue('birthdate') || \"\"}\n                  />\n                  <label htmlFor=\"account_user_birthdate\" className=\"control-label\">\n                    <FormattedMessage id=\"rp.checkout.customer.birthdate\" defaultMessage=\"birthdate\"/>\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row form_content_wrapper\">\n              <div className=\"col-sm-6 no-padding\">\n                <div className=\"form-group\">\n                  <div className=\"col-xs-12\">\n                    <IntlTelInput\n                      preferredCountries={['fr']}\n                      css={['intl-tel-input', 'form-control']}\n                      fieldId={'account_user_mobile'}\n                      utilsScript={'libphonenumber.js'}\n                      format\n                      defaultValue=''\n                      autoPlaceholder\n                      autoHideDialCode\n                      onPhoneNumberChange={this.onchangeMobile}\n                      onPhoneNumberBlur={this.onchangeMobile}\n                      value={this.getValueForInput('mobile') || \"\"}\n                      formatOnInit={false}\n                    />\n                    <div className=\"phone-icon-elements\">\n                      <span className=\"phone-checker phone-icon fa fa-2x form-control-feedback withoutprepend fa-check\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-sm-6 no-padding\">\n                <div className=\"form-group\">\n                  <div className=\"col-xs-12\">\n                    <IntlTelInput\n                      preferredCountries={['fr']}\n                      css={['intl-tel-input', 'form-control']}\n                      fieldId={'account_user_phone'}\n                      utilsScript={'libphonenumber.js'}\n                      format\n                      defaultValue=''\n                      autoPlaceholder\n                      autoHideDialCode\n                      onPhoneNumberChange={this.onchangePhone}\n                      onPhoneNumberBlur={this.onchangePhone}\n                      value={this.getValueForInput('phone') || \"\"}\n                      defaultCountry={'fr'}\n                      formatOnInit={false}\n                    />\n\n                    <div className=\"phone-icon-elements\">\n                      <span className=\"phone-checker phone-icon fa fa-2x form-control-feedback withoutprepend fa-exclamation-triangle\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <AddressForm\n              localInfo={this.props.localInfo}\n              // render={render}\n              //   updateAddress={updateAddress}\n            />\n\n            <div className=\"col-md-12 cgv-option\">\n              <div className=\"form-group\">\n                <div className=\"col-md-12\">\n                  <div className=\"checkbox\">\n                    <input type=\"checkbox\"\n                           id=\"account_user_optIn\"\n                           required=\"required\"\n                           defaultChecked={this.getValueForInput('optIn') || false}\n                           value=\"1\"\n                           onChange={(e) => this.onchangeOptin(e)}\n                    />\n                    <label htmlFor=\"account_user_optIn\">\n                      <FormattedMessage id=\"rp.forms.checkout.payment.optin\" defaultMessage=\"optIn\"/>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-xs-12 cgv\">\n              <FormattedMessage id=\"rp.forms.checkout.cnil\" defaultMessage=\"cnil\"/>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col-xs-12\"><b><b>\n                <button className=\"btn-main btn-full btn-lg small-margin-top\" type=\"submit\">\n                  <FormattedMessage id=\"rp.checkout.customer.next.btn\" defaultMessage=\"accept and continue\"/>\n                </button>\n              </b></b>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nFormAccountEdit.propTypes = {\n  localInfo: PropTypes.object.isRequired,\n  // onClickEditAccount: PropTypes.func.isRequired,\n  // setAddress: PropTypes.func.isRequired,\n  // setFirstname: PropTypes.func.isRequired,\n  // setLastname: PropTypes.func.isRequired,\n  // setMobile: PropTypes.func.isRequired,\n  // setOptIn: PropTypes.func.isRequired,\n  // setPhone: PropTypes.func.isRequired,\n  // setEmail: PropTypes.func.isRequired,\n  // setBirthdate: PropTypes.func.isRequired,\n  // setPassword: PropTypes.func.isRequired,\n};\n\nFormAccountEdit.defaultProps = {\n  localInfo: {},\n};\n\nexport default injectIntl(FormAccountEdit);\n"]}