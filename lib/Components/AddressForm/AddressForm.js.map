{"version":3,"sources":["../../../src/Components/AddressForm/AddressForm.jsx"],"names":["AddressForm","id","element","document","getElementById","options","types","autocomplete","google","maps","places","Autocomplete","event","addListener","onPlaceChanged","place","getPlace","fullAddress","i","address_components","component","j","type_element","long_name","value","setAttribute","localInfo","size","get","Map","props","state","country","onchangeAddress","bind","addDomListener","window","initializeAutocomplete","val","setState","e","setAddress","target","formatMessage","intl","getAddress1Value","defaultMessage","getAddress2Value","getZipcodeValue","getCityValue","getCountryValue","selectCountry","Component","propTypes","PropTypes","object","render","isRequired","func","defaultProps"],"mappings":"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","file":"AddressForm.js","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { CountryDropdown } from 'react-country-region-selector';\n\n/**\n * Class : Address Form\n */\nclass AddressForm extends Component {\n\n  /**\n   * Takes the input ID to be grafted onto, creates an autocomplete, and listens for the place_changed event\n   * @param id\n   */\n  static initializeAutocomplete(id) {\n    const element = document.getElementById(id);\n    if (element) {\n      const options = {\n        types: ['geocode']\n      };\n      const autocomplete = new google.maps.places.Autocomplete(element, options);\n      google.maps.event.addListener(autocomplete, 'place_changed', AddressForm.onPlaceChanged);\n    }\n  }\n\n  /**\n   * We will retrieve detailed information of the chosen address\n   */\n  static onPlaceChanged() {\n    const place = this.getPlace();\n    const fullAddress = [];\n\n    for (let i in place.address_components) {\n      const component = place.address_components[i];\n\n      for (const j in component.types) {\n        const type_element = document.getElementById(component.types[j]);\n\n        if (component.types[j] === \"street_number\") {\n          fullAddress[0] = component.long_name;\n        }\n\n        if (component.types[j] === \"route\") {\n          fullAddress[1] = component.long_name;\n        }\n\n        if (component.types[j] === \"country\") {\n          document.getElementById('country_dropdown').value = component.long_name;\n        }\n\n        document.getElementById('fullAddr').setAttribute('value', fullAddress);\n        document.getElementById('fullAddr').value = fullAddress;\n\n        if (type_element) {\n          type_element.setAttribute('value', component.long_name);\n          type_element.value = component.long_name;\n        }\n      }\n    }\n  }\n\n  static getAddress1Value(localInfo) {\n    return localInfo.size > 0\n      ? localInfo.get('values').get('addresses', new Map()).get('address1')\n      : '';\n  }\n\n  static getAddress2Value(localInfo) {\n    return localInfo.size > 0\n      ? localInfo.get('values').get('addresses', new Map()).get('address2')\n      : '';\n  }\n\n  static getZipcodeValue(localInfo) {\n    return localInfo.size > 0\n      ? localInfo.get('values').get('addresses', new Map()).get('zipcode')\n      : '';\n  }\n\n  static getCityValue(localInfo) {\n    return localInfo.size > 0\n      ? localInfo.get('values').get('addresses', new Map()).get('city')\n      : '';\n  }\n\n  static getCountryValue(localInfo) {\n    return localInfo.size > 0\n      ? localInfo.get('values').get('addresses', new Map()).get('country')\n      : '';\n  }\n\n  // Define Constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: '',\n    };\n\n    this.onchangeAddress = this.onchangeAddress.bind(this);\n  }\n\n  /**\n   * Executed after the first render only on the client side\n   */\n  componentDidMount() {\n    // We add a DOM event here to show an alert if the DIV containing the place is load.\n    google.maps.event.addDomListener(window, 'load', function () {\n      AddressForm.initializeAutocomplete('address_billingaddress_address1');\n    });\n  }\n\n  /**\n   *\n   * @param val\n   */\n  selectCountry(val) {\n    this.setState({ country: val });\n  }\n\n  onchangeAddress(e, id) {\n    this.props.setAddress( id, e.target.value);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { localInfo } = this.props;\n\n    return (\n      <div>\n        <div className=\"row form_content_wrapper\">\n          <div className=\"form-group\">\n            <div className=\"col-xs-12\">\n              <input type=\"text\"\n                     id=\"address_billingaddress_address1\"\n                     data-control=\"true\"\n                     autoComplete=\"address-line1\"\n                     value={AddressForm.getAddress1Value(localInfo) || \"\"}\n                     onChange={(e) => this.onchangeAddress(e, 'address1')}\n                     required\n              />\n              <label className=\"control-label\" htmlFor=\"address_billingaddress_address1\">\n                {formatMessage({id: 'rp.checkout.billingaddress.address1', defaultMessage: 'address1'})}\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row form_content_wrapper\">\n          <div className=\"form-group\">\n            <div className=\"col-xs-12\">\n              <input type=\"text\"\n                     id=\"fullAddr\"\n                     name=\"fullAddr\"\n                     data-control=\"true\"\n                     autoComplete=\"address-line2\"\n                     value={AddressForm.getAddress2Value(localInfo) || \"\"}\n                     onChange={(e) => this.onchangeAddress(e, 'address2')}\n              />\n              <label className=\"control-label\" htmlFor=\"fullAddr\">\n                {formatMessage({id: 'rp.checkout.billingaddress.address2', defaultMessage: 'address2'})}\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row form_content_wrapper\">\n          <div className=\"col-sm-6 no-padding\">\n            <div className=\"form-group\">\n              <div className=\"col-xs-12\">\n                <input type=\"text\"\n                       id=\"postal_code\"\n                       name=\"postal_code\"\n                       data-control=\"true\"\n                       autoComplete=\"postal-code\"\n                       value={AddressForm.getZipcodeValue(localInfo) || \"\"}\n                       onChange={(e) => this.onchangeAddress(e, 'zipcode')}\n                       required\n                />\n                <label className=\"control-label\" htmlFor=\"postal_code\">\n                  {formatMessage({id: 'rp.checkout.billingaddress.zipcode', defaultMessage: 'zipcode'})}\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-sm-6 no-padding\">\n            <div className=\"form-group\">\n              <div className=\"col-xs-12\">\n                <input type=\"text\"\n                       id=\"locality\"\n                       name=\"locality\"\n                       data-control=\"true\"\n                       autoComplete=\"address-line2\"\n                       value={AddressForm.getCityValue(localInfo) || \"\"}\n                       required\n                       onChange={(e) => this.onchangeAddress(e, 'city')}\n                />\n                <label className=\"control-label\" htmlFor=\"locality\">\n                  {formatMessage({id: 'rp.checkout.billingaddress.city', defaultMessage: 'city'})}\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <CountryDropdown\n          defaultOptionLabel={formatMessage({id: 'rp.checkout.billingaddress.country', defaultMessage: 'country'})}\n          value={AddressForm.getCountryValue(localInfo) || \"\"}\n          valueType={'short'}\n          onChange={(val) => this.selectCountry(val)}\n        />\n      </div>\n    );\n  }\n}\n\nAddressForm.propTypes = {\n  localInfo: PropTypes.object,\n  render: PropTypes.object.isRequired,\n  setAddress: PropTypes.func.isRequired,\n};\n\nAddressForm.defaultProps = {\n  localInfo: {},\n};\n\nexport default injectIntl(AddressForm);"]}