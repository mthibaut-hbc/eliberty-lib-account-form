{"version":3,"sources":["../../../src/Components/AddressForm/AddressForm.jsx"],"names":["AddressForm","id","element","document","getElementById","options","types","autocomplete","google","maps","places","Autocomplete","event","addListener","onPlaceChanged","place","getPlace","fullAddress","i","address_components","component","j","typeElement","long_name","value","setAttribute","props","state","country","onchangeAddress","bind","addDomListener","window","initializeAutocomplete","setAddress","setState","key","localInfo","size","get","Map","formatMessage","intl","getAddressValue","e","target","defaultMessage","selectCountry","Component","propTypes","intlShape","isRequired","PropTypes","object","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;;;;;;;AAEA;;;IAGMA,W;;;;;;;AAEJ;;;;;;2CAM8BC,E,EAAI;AAChC,UAAMC,UAAUC,SAASC,cAAT,CAAwBH,EAAxB,CAAhB;AACA,UAAIC,OAAJ,EAAa;AACX,YAAMG,UAAU;AACdC,iBAAO,CAAC,SAAD;AADO,SAAhB;AAGA,YAAMC,eAAe,IAAIC,OAAOC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAAoCT,OAApC,EAA6CG,OAA7C,CAArB;AACAG,eAAOC,IAAP,CAAYG,KAAZ,CAAkBC,WAAlB,CAA8BN,YAA9B,EAA4C,eAA5C,EAA6DP,YAAYc,cAAzE;AACD;AACF;;AAED;;;;;;qCAGwB;AACtB,UAAMC,QAAQ,KAAKC,QAAL,EAAd;AACA,UAAMC,cAAc,EAApB;;AAEA,WAAK,IAAIC,CAAT,IAAcH,MAAMI,kBAApB,EAAwC;AACtC,YAAMC,YAAYL,MAAMI,kBAAN,CAAyBD,CAAzB,CAAlB;;AAEA,aAAK,IAAMG,CAAX,IAAgBD,UAAUd,KAA1B,EAAiC;AAC/B,cAAMgB,cAAcnB,SAASC,cAAT,CAAwBgB,UAAUd,KAAV,CAAgBe,CAAhB,CAAxB,CAApB;;AAEA,cAAID,UAAUd,KAAV,CAAgBe,CAAhB,MAAuB,eAA3B,EAA4C;AAC1CJ,wBAAY,CAAZ,IAAiBG,UAAUG,SAA3B;AACD;;AAED,cAAIH,UAAUd,KAAV,CAAgBe,CAAhB,MAAuB,OAA3B,EAAoC;AAClCJ,wBAAY,CAAZ,IAAiBG,UAAUG,SAA3B;AACD;;AAED,cAAIH,UAAUd,KAAV,CAAgBe,CAAhB,MAAuB,SAA3B,EAAsC;AACpClB,qBAASC,cAAT,CAAwB,kBAAxB,EAA4CoB,KAA5C,GAAoDJ,UAAUG,SAA9D;AACD;;AAEDpB,mBAASC,cAAT,CAAwB,UAAxB,EAAoCqB,YAApC,CAAiD,OAAjD,EAA0DR,WAA1D;AACAd,mBAASC,cAAT,CAAwB,UAAxB,EAAoCoB,KAApC,GAA4CP,WAA5C;;AAEA,cAAIK,WAAJ,EAAiB;AACfA,wBAAYG,YAAZ,CAAyB,OAAzB,EAAkCL,UAAUG,SAA5C;AACAD,wBAAYE,KAAZ,GAAoBJ,UAAUG,SAA9B;AACD;AACF;AACF;AACF;;AAED;;;;AACA,uBAAYG,KAAZ,EAAmB;AAAA;;AAAA,0HACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,eAAS;AADE,KAAb;;AAIA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,OAAvB;AANiB;AAOlB;;AAED;;;;;;;wCAGoB;AAClB;AACAtB,aAAOC,IAAP,CAAYG,KAAZ,CAAkBmB,cAAlB,CAAiCC,MAAjC,EAAyC,MAAzC,EAAiD,YAAY;AAC3DhC,oBAAYiC,sBAAZ,CAAmC,iCAAnC;AACD,OAFD;AAGD;;AAED;;;;;;;;oCAKgBT,K,EAAOvB,E,EAAI;AACzB,WAAKyB,KAAL,CAAWQ,UAAX,CAAsBjC,EAAtB,EAA0BuB,KAA1B;AACD;;AAED;;;;;;;kCAIcA,K,EAAO;AACnB,WAAKW,QAAL,CAAc,EAAEP,SAASJ,KAAX,EAAd;AACA,WAAKK,eAAL,CAAqBL,KAArB,EAA4B,SAA5B;AACD;;AAED;;;;;;;;oCAKgBY,G,EAAK;AACnB,aAAO,KAAKV,KAAL,CAAWW,SAAX,CAAqBC,IAArB,GAA4B,CAA5B,GACH,KAAKZ,KAAL,CAAWW,SAAX,CAAqBE,GAArB,CAAyB,WAAzB,EAAsC,IAAIC,GAAJ,EAAtC,EAAiDD,GAAjD,CAAqDH,GAArD,CADG,GAEH,EAFJ;AAGD;;;6BAEQ;AAAA;;AAAA,UACCK,aADD,GACmB,KAAKf,KAAL,CAAWgB,IAD9B,CACCD,aADD;;;AAGP,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAU,0BAAf;AACE;AAAA;AAAA,cAAK,WAAU,YAAf;AACE;AAAA;AAAA,gBAAK,WAAU,WAAf;AACE;AACE,sBAAK,MADP;AAEE,oBAAG,iCAFL;AAGE,gCAAa,MAHf;AAIE,8BAAa,eAJf;AAKE,uBAAO,KAAKE,eAAL,CAAqB,UAArB,KAAoC,EAL7C;AAME,0BAAU;AAAA,yBAAK,OAAKd,eAAL,CAAqBe,EAAEC,MAAF,CAASrB,KAA9B,EAAqC,UAArC,CAAL;AAAA,iBANZ;AAOE;AAPF,gBADF;AAUE;AAAA;AAAA,kBAAO,WAAU,eAAjB,EAAiC,SAAQ,iCAAzC;AACGiB,8BAAc,EAAExC,IAAI,qCAAN,EAA6C6C,gBAAgB,UAA7D,EAAd;AADH;AAVF;AADF;AADF,SADF;AAoBE;AAAA;AAAA,YAAK,WAAU,0BAAf;AACE;AAAA;AAAA,cAAK,WAAU,YAAf;AACE;AAAA;AAAA,gBAAK,WAAU,WAAf;AACE;AACE,sBAAK,MADP;AAEE,oBAAG,UAFL;AAGE,sBAAK,UAHP;AAIE,gCAAa,MAJf;AAKE,8BAAa,eALf;AAME,uBAAO,KAAKH,eAAL,CAAqB,UAArB,KAAoC,EAN7C;AAOE,0BAAU;AAAA,yBAAK,OAAKd,eAAL,CAAqBe,EAAEC,MAAF,CAASrB,KAA9B,EAAqC,UAArC,CAAL;AAAA;AAPZ,gBADF;AAUE;AAAA;AAAA,kBAAO,WAAU,eAAjB,EAAiC,SAAQ,UAAzC;AACGiB,8BAAc,EAAExC,IAAI,qCAAN,EAA6C6C,gBAAgB,UAA7D,EAAd;AADH;AAVF;AADF;AADF,SApBF;AAuCE;AAAA;AAAA,YAAK,WAAU,0BAAf;AACE;AAAA;AAAA,cAAK,WAAU,qBAAf;AACE;AAAA;AAAA,gBAAK,WAAU,YAAf;AACE;AAAA;AAAA,kBAAK,WAAU,WAAf;AACE;AACE,wBAAK,MADP;AAEE,sBAAG,aAFL;AAGE,wBAAK,aAHP;AAIE,kCAAa,MAJf;AAKE,gCAAa,aALf;AAME,yBAAO,KAAKH,eAAL,CAAqB,SAArB,KAAmC,EAN5C;AAOE,4BAAU;AAAA,2BAAK,OAAKd,eAAL,CAAqBe,EAAEC,MAAF,CAASrB,KAA9B,EAAqC,SAArC,CAAL;AAAA,mBAPZ;AAQE;AARF,kBADF;AAWE;AAAA;AAAA,oBAAO,WAAU,eAAjB,EAAiC,SAAQ,aAAzC;AACGiB,gCAAc,EAAExC,IAAI,oCAAN,EAA4C6C,gBAAgB,SAA5D,EAAd;AADH;AAXF;AADF;AADF,WADF;AAqBE;AAAA;AAAA,cAAK,WAAU,qBAAf;AACE;AAAA;AAAA,gBAAK,WAAU,YAAf;AACE;AAAA;AAAA,kBAAK,WAAU,WAAf;AACE;AACE,wBAAK,MADP;AAEE,sBAAG,UAFL;AAGE,wBAAK,UAHP;AAIE,kCAAa,MAJf;AAKE,gCAAa,eALf;AAME,yBAAO,KAAKH,eAAL,CAAqB,MAArB,KAAgC,EANzC;AAOE,gCAPF;AAQE,4BAAU;AAAA,2BAAK,OAAKd,eAAL,CAAqBe,EAAEC,MAAF,CAASrB,KAA9B,EAAqC,MAArC,CAAL;AAAA;AARZ,kBADF;AAWE;AAAA;AAAA,oBAAO,WAAU,eAAjB,EAAiC,SAAQ,UAAzC;AACGiB,gCAAc,EAAExC,IAAI,iCAAN,EAAyC6C,gBAAgB,MAAzD,EAAd;AADH;AAXF;AADF;AADF;AArBF,SAvCF;AAiFE,sCAAC,2CAAD;AACE,8BAAoBL,cAAc,EAAExC,IAAI,oCAAN,EAA4C6C,gBAAgB,SAA5D,EAAd,CADtB;AAEE,iBAAO,KAAKH,eAAL,CAAqB,SAArB,KAAmC;AAC1C;AAHF,YAIE,UAAU,kBAACnB,KAAD,EAAW;AACnB,mBAAKuB,aAAL,CAAmBvB,KAAnB;AACA;AACD;AAPH;AAjFF,OADF;AA6FD;;;;EAxMuBwB,gB;;AA2M1BhD,YAAYiD,SAAZ,GAAwB;AACtBP,QAAMQ,qBAAUC,UADM,EACM;AAC5Bd,aAAWe,qBAAUC;AACvB;AACA;AAJwB,CAAxB;;AAOArD,YAAYsD,YAAZ,GAA2B;AACzBjB,aAAW;AADc,CAA3B;;kBAIe,2BAAWrC,WAAX,C","file":"AddressForm.js","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { CountryDropdown } from 'react-country-region-selector';\n\n/**\n * Class : Address Form\n */\nclass AddressForm extends Component {\n\n  /**\n   * Takes the input ID to be grafted onto, creates an autocomplete,\n   * and listens for the place_changed event\n   *\n   * @param id\n   */\n  static initializeAutocomplete(id) {\n    const element = document.getElementById(id);\n    if (element) {\n      const options = {\n        types: ['geocode'],\n      };\n      const autocomplete = new google.maps.places.Autocomplete(element, options);\n      google.maps.event.addListener(autocomplete, 'place_changed', AddressForm.onPlaceChanged);\n    }\n  }\n\n  /**\n   * We will retrieve detailed information of the chosen address\n   */\n  static onPlaceChanged() {\n    const place = this.getPlace();\n    const fullAddress = [];\n\n    for (let i in place.address_components) {\n      const component = place.address_components[i];\n\n      for (const j in component.types) {\n        const typeElement = document.getElementById(component.types[j]);\n\n        if (component.types[j] === 'street_number') {\n          fullAddress[0] = component.long_name;\n        }\n\n        if (component.types[j] === 'route') {\n          fullAddress[1] = component.long_name;\n        }\n\n        if (component.types[j] === 'country') {\n          document.getElementById('country_dropdown').value = component.long_name;\n        }\n\n        document.getElementById('fullAddr').setAttribute('value', fullAddress);\n        document.getElementById('fullAddr').value = fullAddress;\n\n        if (typeElement) {\n          typeElement.setAttribute('value', component.long_name);\n          typeElement.value = component.long_name;\n        }\n      }\n    }\n  }\n\n  // Define Constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: '',\n    };\n\n    this.onchangeAddress = this.onchangeAddress.bind(this);\n  }\n\n  /**\n   * Executed after the first render only on the client side\n   */\n  componentDidMount() {\n    // We add a DOM event here to show an alert if the DIV containing the place is load.\n    google.maps.event.addDomListener(window, 'load', function () {\n      AddressForm.initializeAutocomplete('address_billingaddress_address1');\n    });\n  }\n\n  /**\n   *\n   * @param value\n   * @param id\n   */\n  onchangeAddress(value, id) {\n    this.props.setAddress(id, value);\n  }\n\n  /**\n   *\n   * @param value\n   */\n  selectCountry(value) {\n    this.setState({ country: value });\n    this.onchangeAddress(value, 'country');\n  }\n\n  /**\n   *\n   * @param key\n   * @returns {string}\n   */\n  getAddressValue(key) {\n    return this.props.localInfo.size > 0\n      ? this.props.localInfo.get('addresses', new Map()).get(key)\n      : '';\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <div>\n        <div className=\"row form_content_wrapper\">\n          <div className=\"form-group\">\n            <div className=\"col-xs-12\">\n              <input\n                type=\"text\"\n                id=\"address_billingaddress_address1\"\n                data-control=\"true\"\n                autoComplete=\"address-line1\"\n                value={this.getAddressValue('address1') || ''}\n                onChange={e => this.onchangeAddress(e.target.value, 'address1')}\n                required\n              />\n              <label className=\"control-label\" htmlFor=\"address_billingaddress_address1\">\n                {formatMessage({ id: 'rp.checkout.billingaddress.address1', defaultMessage: 'address1' })}\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row form_content_wrapper\">\n          <div className=\"form-group\">\n            <div className=\"col-xs-12\">\n              <input\n                type=\"text\"\n                id=\"fullAddr\"\n                name=\"fullAddr\"\n                data-control=\"true\"\n                autoComplete=\"address-line2\"\n                value={this.getAddressValue('address2') || ''}\n                onChange={e => this.onchangeAddress(e.target.value, 'address2')}\n              />\n              <label className=\"control-label\" htmlFor=\"fullAddr\">\n                {formatMessage({ id: 'rp.checkout.billingaddress.address2', defaultMessage: 'address2' })}\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row form_content_wrapper\">\n          <div className=\"col-sm-6 no-padding\">\n            <div className=\"form-group\">\n              <div className=\"col-xs-12\">\n                <input\n                  type=\"text\"\n                  id=\"postal_code\"\n                  name=\"postal_code\"\n                  data-control=\"true\"\n                  autoComplete=\"postal-code\"\n                  value={this.getAddressValue('zipcode') || ''}\n                  onChange={e => this.onchangeAddress(e.target.value, 'zipcode')}\n                  required\n                />\n                <label className=\"control-label\" htmlFor=\"postal_code\">\n                  {formatMessage({ id: 'rp.checkout.billingaddress.zipcode', defaultMessage: 'zipcode' })}\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-sm-6 no-padding\">\n            <div className=\"form-group\">\n              <div className=\"col-xs-12\">\n                <input\n                  type=\"text\"\n                  id=\"locality\"\n                  name=\"locality\"\n                  data-control=\"true\"\n                  autoComplete=\"address-line2\"\n                  value={this.getAddressValue('city') || ''}\n                  required\n                  onChange={e => this.onchangeAddress(e.target.value, 'city')}\n                />\n                <label className=\"control-label\" htmlFor=\"locality\">\n                  {formatMessage({ id: 'rp.checkout.billingaddress.city', defaultMessage: 'city' })}\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <CountryDropdown\n          defaultOptionLabel={formatMessage({ id: 'rp.checkout.billingaddress.country', defaultMessage: 'country' })}\n          value={this.getAddressValue('country') || ''}\n          // valueType={'short'}\n          onChange={(value) => {\n            this.selectCountry(value);\n            // this.onchangeAddress(e, 'country');\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nAddressForm.propTypes = {\n  intl: intlShape.isRequired, // for the internationalization\n  localInfo: PropTypes.object,\n//  render: PropTypes.object.isRequired,\n//  setAddress: PropTypes.func.isRequired,\n};\n\nAddressForm.defaultProps = {\n  localInfo: {},\n};\n\nexport default injectIntl(AddressForm);\n"]}